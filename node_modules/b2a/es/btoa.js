import { chars, error } from './common'; // btoa polyfill for IE<10 courtesy https://gist.github.com/nignag/999166

var E = error('The string to be encoded contains characters out of range');
export var _btoa = typeof btoa !== 'undefined'
/* istanbul ignore next */
? function (input) {
  return btoa(input);
} : function (input) {
  var str = String(input);
  var output = '';

  for ( // initialize result and counter
  var block, charCode, idx = 0, map = chars; // if the next str index does not exist:
  //   change the mapping table to "="
  //   check if d has no fractional digits
  str.charAt(idx | 0) || (map = '=', idx % 1); // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
    charCode = str.charCodeAt(idx += 3 / 4);

    if (charCode > 0xFF) {
      throw new E();
    }

    block = block << 8 | charCode;
  }

  return output;
};

var utf8 = function (input) {
  return encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function (match, p1) {
    return String.fromCharCode('0x' + p1);
  });
};

export default (function (input) {
  return _btoa(utf8(input));
});