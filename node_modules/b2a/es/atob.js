import { chars, error } from './common';
var E = error('The string to be decoded is not correctly encoded');
export var _atob = typeof atob !== 'undefined'
/* istanbul ignore next */
? function (input) {
  return atob(input);
} : function (input) {
  var str = String(input).replace(/[=]+$/, '');

  if (str.length % 4 == 1) {
    throw new E();
  }

  var output = '';

  for ( // initialize result and counters
  var bc = 0, bs, buffer, idx = 0; // get next character
  buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;
  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,
  // convert the first 8 bits to one ascii character
  bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
    // try to find character in table (0-63, not found => -1)
    buffer = chars.indexOf(buffer);
  }

  return output;
};

var utf16 = function (input) {
  return decodeURIComponent(input.split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
};

export default (function (input) {
  return utf16(_atob(input));
});